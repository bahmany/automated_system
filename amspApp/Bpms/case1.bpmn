# -*- coding: utf-8
from copy import copy
import io
import pickle

import sys, os
from amspApp.Infrustructures.MySpiffWorkflow.bpmn.BpmnWorkflow import BpmnWorkflow
from amspApp.Infrustructures.MySpiffWorkflow.bpmn.parser.ValidationException import ValidationException
from amspApp.Infrustructures.MySpiffWorkflow.bpmn.parser.util import *
from amspApp.Bpms.MyPackager import MyPackager

sys.path.insert(0, os.path.join(os.path.dirname(__file__), '../../lib'))

from amspApp.Infrustructures.MySpiffWorkflow.specs import *

from amspApp.Infrustructures.MySpiffWorkflow import Task, Workflow
from amspApp.Infrustructures.MySpiffWorkflow.storage import XmlSerializer

from amspApp.Infrustructures.MySpiffWorkflow.bpmn.storage.BpmnSerializer import BpmnSerializer
from amspApp.Infrustructures.MySpiffWorkflow.bpmn.storage.Packager import Packager
from amspApp.Infrustructures.MySpiffWorkflow.bpmn.specs.UserTask import UserTask as UserTaskSpecBpmn
from amspApp.Bpms.models import Task as databaseTask


class BpmEngine(object):
    def __init__(self, xml, forms, userTasks, taskObjId):
        self.serializer = BpmnSerializer()
        self.package = io.BytesIO()
        self.forms = forms
        self.taskObjId = taskObjId
        self.userTasks = userTasks
        package = MyPackager(self.package, 'Process_1')
        self.xml = xml
        package.add_bpmn_file(self.xml)
        package.create_package_xml()
        self.wf_spec = self.serializer.deserialize_workflow_spec(self.package)
        # self.taken_path = self.track_workflow(self.wf_spec)
        self.workflow = BpmnWorkflow(self.wf_spec)

    def run(self):
        workflow = self.workflow
        condition_keys = []
        while not workflow.is_completed():
            tasks = workflow.get_tasks(Task.READY)

            for t in tasks:
                obj = databaseTask.objects.get(pk=self.taskObjId)
                amir = copy(obj.formData)
                t.set_data(**amir)
                if type(t.task_spec) == UserTaskSpecBpmn:
                    for ut in self.userTasks:
                        if ut['taskId'] == t.task_spec.name:
                            obj.thisPerformer = ut['performer']
                            obj.thisStep = ut['taskId']
                            obj.engineInstance = pickle.dumps(self)
                            obj.save()
                    return

                if hasattr(t.task_spec, "cond_task_specs"):
                    for cond, name in t.task_spec.cond_task_specs:
                        for cond_unit in cond.args:
                            if hasattr(cond_unit, "name"):
                                condition_keys.append(cond_unit.name)

            # for t in tasks:
            # t.set_data(**self.userTasks)

            workflow.complete_next()

    def keep_going(self, requestData=None, databaseData=None):
        workflow = self.workflow
        condition_keys = []
        while not workflow.is_completed():
            tasks = workflow.get_tasks(Task.READY)
            for t in tasks:
                obj = databaseTask.objects.get(pk=self.taskObjId)
                amir = copy(obj.formData)
                t.set_data(**amir)
                if not obj.thisStep == t.task_spec.name:
                    if type(t.task_spec) == UserTaskSpecBpmn:
                        for ut in self.userTasks:
                            if ut['taskId'] == t.task_spec.name:
                                obj.thisPerformer = ut['performer']
                                obj.thisStep = ut['taskId']
                                obj.engineInstance = pickle.dumps(self)
                                obj.save()
                        return

                if hasattr(t.task_spec, "cond_task_specs"):
                    for cond, name in t.task_spec.cond_task_specs:
                        for cond_unit in cond.args:
                            if hasattr(cond_unit, "name"):
                                condition_keys.append(cond_unit.name)

            workflow.complete_next()
